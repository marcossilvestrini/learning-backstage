- name: Create directory if it doesn't exist
  command: test -d '{{ app_dir }}'
  become: true    
  register: directory_check
  ignore_errors: true
  no_log: true

- name: Create '{{ app_dir }}' directory
  command: mkdir -p '{{ app_dir }}'
  become: true  
  when: directory_check.rc != 0

- name: Set permissions on /opt/backstage
  command: chown -R vagrant:vagrant /opt/backstage
  become: true
  
- name: Check if source directory exists
  stat:
    path: '{{ app_scaff }}'
  register: source_directory

- name: Copy skynet to /opt/backstage
  synchronize:
    src: '{{ app_scaff }}/'
    dest: '{{ app_dir }}/'
    recursive: yes  
  when: source_directory.stat.exists

- name: Find and run dos2unix
  find:
    paths: '{{ app_dir }}'
    patterns: "*.*"
  register: found_files

- name: Execute dos2unix on found files
  command: dos2unix "{{ item.path }}"
  with_items: "{{ found_files.files }}"
  no_log: true


- name: Install dependencies
  ansible.builtin.shell: |
    yarn install
    yarn cache clean
  args:
    chdir: '{{ app_dir }}'
    executable: /bin/bash

- name: Check if backstage-cli is available
  ansible.builtin.shell: |
    yarn global list --pattern @backstage/cli --depth=0
  args:
    chdir: '{{ app_dir }}'
    executable: /bin/bash
  register: backstage_cli_check
  changed_when: '"@backstage/cli" not in backstage_cli_check.stdout'
  failed_when: false

- name: Install backstage-cli globally
  ansible.builtin.shell: |
    yarn global add @backstage/cli
  args:
    chdir: '{{ app_dir }}'
    executable: /bin/bash
  when: '"@backstage/cli" not in backstage_cli_check.stdout'

# Gitlab integration
- name: Check if @immobiliarelabs/backstage-plugin-gitlab is installed
  ansible.builtin.command:
    cmd: "yarn --cwd packages/app list | grep @immobiliarelabs/backstage-plugin-gitlab"
    chdir: '{{ app_dir }}'
  register: gitlab_plugin_check
  failed_when: false

- name: Install @immobiliarelabs/backstage-plugin-gitlab if not installed
  ansible.builtin.shell: |
    yarn  --cwd packages/app add @immobiliarelabs/backstage-plugin-gitlab
    yarn install 
    yarn cache clean
  args:
    chdir: '{{ app_dir }}'
    executable: /bin/bash
  when: gitlab_plugin_check.rc != 0


- name: Check if @immobiliarelabs/backstage-plugin-gitlab-backend is installed
  ansible.builtin.command:
    cmd: "yarn --cwd packages/app list | grep @immobiliarelabs/backstage-plugin-gitlab-backend"
    chdir: '{{ app_dir }}'
  register: gitlab_plugin_check
  failed_when: false

- name: Install @immobiliarelabs/backstage-plugin-gitlab-backend if not installed
  ansible.builtin.shell: |
    yarn  --cwd packages/app add @immobiliarelabs/backstage-plugin-gitlab-backend
    yarn install 
    yarn cache clean
  args:
    chdir: '{{ app_dir }}'
    executable: /bin/bash
  when: gitlab_plugin_check.rc != 0

- name: Synchronize files to '{{ app_scaff }}'
  synchronize:
    src: '{{ app_dir }}/'  # Garantir que hÃ¡ uma barra no final
    dest: '{{ app_scaff }}/'
    rsync_opts:
      - --exclude=node_modules
      - --exclude=dist-types
      - --exclude=.git
  
- name: Set permissions on /opt/backstage
  command: chown -R vagrant:vagrant /opt/backstage
  become: true  

- name: Kill any node processes
  command: pkill node
  become: true
  ignore_errors: true

- name: Start the application in background  
  ansible.builtin.shell: |
    source .env 
    LOG_LEVEL=debug yarn dev > '{{ app_dir }}/yarn_dev.log' 2>&1 &
  args:    
    executable: /bin/bash
    chdir: '{{ app_dir }}'

- name: Ensure Backstage starts successfully
  block:
    - name: Wait for Backstage Stack Up'
      wait_for:
        path: '{{ app_dir }}/yarn_dev.log'
        search_regex: 'webpack compiled successfully'
        timeout: 120  # 10 minutes

    - name: Display success message
      debug:
        msg: "Backstage started successfully!"
  rescue:
    - name: Display failure message
      debug:
        msg: "Backstage did not start successfully within the given time."
